[{"C:\\web_dev\\theme-maker\\src\\index.js":"1","C:\\web_dev\\theme-maker\\src\\reportWebVitals.js":"2","C:\\web_dev\\theme-maker\\src\\App.js":"3","C:\\web_dev\\theme-maker\\src\\Section\\Section.js":"4","C:\\web_dev\\theme-maker\\src\\StylePicker\\StylePicker.js":"5","C:\\web_dev\\theme-maker\\src\\initialThemeObject.js":"6","C:\\web_dev\\theme-maker\\src\\ThemeEditor\\ThemeEditor.js":"7"},{"size":517,"mtime":1608061461736,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1608061471334,"results":"10","hashOfConfig":"9"},{"size":1617,"mtime":1608383418468,"results":"11","hashOfConfig":"9"},{"size":690,"mtime":1608301188916,"results":"12","hashOfConfig":"9"},{"size":4440,"mtime":1608327445445,"results":"13","hashOfConfig":"9"},{"size":3978,"mtime":1608327607674,"results":"14","hashOfConfig":"9"},{"size":1063,"mtime":1608383379592,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"18hixi9",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\web_dev\\theme-maker\\src\\index.js",[],["32","33"],"C:\\web_dev\\theme-maker\\src\\reportWebVitals.js",[],"C:\\web_dev\\theme-maker\\src\\App.js",[],"C:\\web_dev\\theme-maker\\src\\Section\\Section.js",[],"C:\\web_dev\\theme-maker\\src\\StylePicker\\StylePicker.js",["34","35"],"import React, { useState, useEffect } from 'react'\r\nimport './StylePicker.css';\r\n\r\nconst StylePicker = ({ sectionName, styleName, themeState, themeDispatch }) => {\r\n  const styleData = themeState[sectionName][styleName]\r\n  const [style, setStyle] = useState(themeState[sectionName][styleName].styleValue)\r\n  const [resolvedStyle, setResolvedStyle] = useState(themeState[sectionName][styleName].styleValueResolved)\r\n  const [errors, setErrors] = useState([])\r\n\r\n  const validateRegex = (value, validationArray) => {\r\n    let myValue = value.slice()\r\n    let pos = 0\r\n\r\n    for (let i = 0; i < validationArray.length; i++) {\r\n      if (myValue.match(validationArray[i].regex)) {\r\n        pos += myValue.match(validationArray[i].regex).length\r\n        myValue = myValue.replace(validationArray[i].regex, \"\")\r\n      } else {\r\n        return [validationArray[i].message, pos]\r\n      }\r\n    }\r\n\r\n    return ['NO_ERROR', -1]\r\n  }\r\n\r\n  const resolveStyle = (styleVar) => {\r\n    let containsUndefined = false\r\n    const metadata = []\r\n    if (!styleData.metadata.allowVariables) {\r\n      return [styleVar, metadata, containsUndefined]\r\n    }\r\n    if (styleVar && !styleVar.match(/\\{(.*?)\\}/g)) {\r\n      return [styleVar, metadata, containsUndefined]\r\n    }\r\n    const newResolvedStyle = styleVar && styleVar.replace(/\\{(.*?)\\}/g, (match) => {\r\n      const variable = match\r\n      const propsArray = match.replace('{', '').replace('}', '').split('.')\r\n      const style = themeState[propsArray[0]]\r\n        && themeState[propsArray[0]][propsArray[1]]\r\n        && themeState[propsArray[0]][propsArray[1]].styleValue\r\n\r\n      if (style === undefined) {\r\n        containsUndefined = true\r\n      }\r\n\r\n      metadata.push({ variable, style })\r\n      return style\r\n    });\r\n    return [newResolvedStyle, metadata, containsUndefined]\r\n  }\r\n\r\n  const validateInput = (inputStyle) => {\r\n    setErrors([])\r\n    const resolvedStyleData = resolveStyle(style)\r\n    if (inputStyle === '') {\r\n      setErrors(['Input cannot be empty'])\r\n      return false\r\n    }\r\n    if (!styleData.metadata.allowVariables && (inputStyle.includes('{') || inputStyle.includes('}'))) {\r\n      setErrors(['Variables are not allowed for this style input'])\r\n      return false\r\n    }\r\n    if (resolvedStyleData[2]) {\r\n      const [resolvedStyle, metadata] = resolvedStyleData\r\n      let errorMessage = 'The following variables do not exist: '\r\n      metadata.forEach(el => {\r\n        if (el.style === undefined) {\r\n          errorMessage += ` ${el.variable}`\r\n        }\r\n      })\r\n      setErrors([errorMessage])\r\n      return false\r\n    }\r\n    if (styleData.metadata.validationRegex.length > 0) {\r\n      const errorMessages = []\r\n      styleData.metadata.validationRegex.forEach(el => {\r\n        errorMessages.push(validateRegex(resolvedStyleData[0], el))\r\n      })\r\n      const noError = errorMessages.find(el => el[0] === 'NO_ERROR')\r\n      if (!noError) {\r\n        errorMessages.forEach(el => {\r\n          setErrors(previousErrors => [...previousErrors, `${el[0]} at position ${el[1]}`])\r\n        })\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!validateInput(style)) return\r\n    themeDispatch(\r\n      {\r\n        type: 'UPDATE_THEME',\r\n        payload: { [sectionName]: { [styleName]: { styleValue: style, styleValueResolved: resolveStyle(style)[0] } } }\r\n      }\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    setResolvedStyle(resolveStyle(style)[0])\r\n  }, [themeState])\r\n\r\n  return (\r\n    <div data-testid='style-picker' className=\"style-picker-container\">\r\n      <span>{styleData.metadata.description}: </span>\r\n      <strong data-testid='resolved-style'>\r\n        {resolvedStyle}\r\n      </strong>\r\n      <i>{sectionName}.{styleName}</i>\r\n      <br />\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor='style'>Value : </label>\r\n        <input\r\n          type='text'\r\n          id='style'\r\n          name='style'\r\n          placeholder=\"Style\"\r\n          value={style}\r\n          onChange={(e) => setStyle(e.target.value)}\r\n        />\r\n        {\r\n          !!errors.length &&\r\n          <ul>\r\n            Please verify that you respect at least one of the following:\r\n            {errors.map(error => <li key={error}>{error}</li>)}\r\n          </ul>\r\n        }\r\n        <button data-testid=\"ok-btn\" type='submit'>OK</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StylePicker\r\n","C:\\web_dev\\theme-maker\\src\\initialThemeObject.js",[],"C:\\web_dev\\theme-maker\\src\\ThemeEditor\\ThemeEditor.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":64,"column":14,"nodeType":"42","messageId":"43","endLine":64,"endColumn":27},{"ruleId":"44","severity":1,"message":"45","line":103,"column":6,"nodeType":"46","endLine":103,"endColumn":18,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'resolvedStyle' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'resolveStyle' and 'style'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setResolvedStyle' needs the current value of 'style'.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [resolveStyle, style, themeState]",{"range":"53","text":"54"},[3494,3506],"[resolveStyle, style, themeState]"]